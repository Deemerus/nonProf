import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;

public class App {

	public static void main(String[] args) {
		Set<String> elements = new HashSet<String>();
		Map<String, Element> elementsMap = new HashMap<String,Element>();
		try (Scanner scanner = new Scanner(new File("ptdata2.csv"))) {
			scanner.nextLine();
			while (scanner.hasNextLine()) {
				String[] line = scanner.nextLine().replace("\"", "").replace(" ", "").split(",");
				elements.add(line[1].toLowerCase());
				elementsMap.put(line[1], new Element(line[2], Double.parseDouble(line[3])));
			}

		} catch (FileNotFoundException e) {
			System.out.println("File ptdata2.csv not found.");
		}
		try (Scanner scanner2 = new Scanner(System.in)) {
			while (scanner2.hasNextLine()) {
				List<String> solutions = new LinkedList<String>();
				String line = scanner2.nextLine();
				checkOne(line, "", elements, solutions);
				checkTwo(line, "", elements, solutions);
				String lowestWeight = solutions.get(0);
				for(String solution:solutions){
					
				}
			}
		}
	}

	public static void checkOne(String line, String solution, Set<String> elements, List<String> solutions) {
		if (elements.contains(line.substring(solution.length(), solution.length() + 1))) {
			solution += Character.toUpperCase(line.charAt(solution.length()));
			if (solution.length() == line.length()) {
				solutions.add(solution);
			} else {
				checkOne(line, solution, elements, solutions);
				if (solution.length() < line.length() - 1) {
					checkTwo(line, solution, elements, solutions);
				}
			}
		}
	}

	public static void checkTwo(String line, String solution, Set<String> elements, List<String> solutions) {
		if (elements.contains(line.substring(solution.length(), solution.length() + 2))) {
			solution += Character.toUpperCase(line.charAt(solution.length()));
			solution += line.charAt(solution.length());
			if (solution.length() == line.length()) {
				solutions.add(solution);
			} else {
				checkOne(line, solution, elements, solutions);
				if (solution.length() < line.length() - 1) {
					checkTwo(line, solution, elements, solutions);
				}
			}
		}
	}
	
	public static double getWeight(String solution, Map<String,Element> elementsMap){
		double weight = 0;
		for(int i=0;i<solution.length();){
			if(Character.isUpperCase(solution.charAt(i+1))){
				i++;
				weight+=elementsMap.get(solution.substring(i, i+1)).getWeight();
			}else{
				i+=2;
				weight+=elementsMap.get(solution.substring(i, i+2)).getWeight();
			}
		}
	}

}
