import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Maze {
	private int[][] maze;
	private int length;
	private int height;
	private static final Direction[] direction = {new Direction(1,0), new Direction(-1,0), new Direction(0,1), new Direction(1,0)}; //{up, down, right, left}
	List<Node> nodes = new ArrayList<Node>();

	Maze() {
		try (Scanner in = new Scanner(new File("maze.bin"))) {
			this.length = in.nextLine().length();
			int i = 1;
			for (; in.hasNextLine(); i++)
				in.nextLine();
			this.height = i;
		} catch (FileNotFoundException e) {
			System.out.println("File maze.bin not found.");
		}
		this.maze = new int[this.height][this.length];
		try (Scanner in = new Scanner(new File("maze.bin"))) {
			for (int i = 0; in.hasNextLine(); i++) {
				char[] charArray = in.nextLine().toCharArray();
				for (int j = 0; j < charArray.length; j++) {
					if (charArray[j] == '#') {
						maze[i][j] = 0;
					} else {
						maze[i][j] = 1;
					}
				}
			}
		} catch (FileNotFoundException e) {
			System.out.println("File maze.bin not found.");
		}
	}

	public int getLength() {
		return length;
	}

	public int getHeight() {
		return height;
	}

	boolean checkIfNode(int height, int length) {
		if (maze[height][length] == 1) {
			if (maze[height + 1][length] + maze[height - 1][length] + maze[height][length + 1]
					+ maze[height][length - 1] > 2) {
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	public void setMaze(int height, int length, int value) {
		this.maze[height][length] = value;
	}

	public void addNode(Node node) {
		nodes.add(node);
	}

	public void placeNodesOnMaze() {
		for (Node node : nodes) {
			this.setMaze(node.getHeight(), node.getLength(), -1);
		}
	}

	public void lookForNeighbours(){
		for(Node node:nodes){
			for(int direction:directions){ //1 left // -1 right // 2 up // -2 down
			searchNeighbour(node.getHeight(), node.getLength(), direction, 0);
			}
		}
	}

	public void searchNeighbour(int height, int length, int passedDirection, int distance){
		passedDirection*=-1;
		for(int direction:directions){
			if(direction!=passedDirection){
				
			}
		}
	}
}
